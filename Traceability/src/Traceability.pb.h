// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Traceability.proto

#ifndef PROTOBUF_INCLUDED_Traceability_2eproto
#define PROTOBUF_INCLUDED_Traceability_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Traceability_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_Traceability_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
namespace Traceability {
class IpfsTable;
class IpfsTableDefaultTypeInternal;
extern IpfsTableDefaultTypeInternal _IpfsTable_default_instance_;
class ProductTable;
class ProductTableDefaultTypeInternal;
extern ProductTableDefaultTypeInternal _ProductTable_default_instance_;
}  // namespace Traceability
namespace google {
namespace protobuf {
template<> ::Traceability::IpfsTable* Arena::CreateMaybeMessage<::Traceability::IpfsTable>(Arena*);
template<> ::Traceability::ProductTable* Arena::CreateMaybeMessage<::Traceability::ProductTable>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Traceability {

// ===================================================================

class IpfsTable :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Traceability.IpfsTable) */ {
 public:
  IpfsTable();
  virtual ~IpfsTable();

  IpfsTable(const IpfsTable& from);

  inline IpfsTable& operator=(const IpfsTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IpfsTable(IpfsTable&& from) noexcept
    : IpfsTable() {
    *this = ::std::move(from);
  }

  inline IpfsTable& operator=(IpfsTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const IpfsTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpfsTable* internal_default_instance() {
    return reinterpret_cast<const IpfsTable*>(
               &_IpfsTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(IpfsTable* other);
  friend void swap(IpfsTable& a, IpfsTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IpfsTable* New() const final {
    return CreateMaybeMessage<IpfsTable>(nullptr);
  }

  IpfsTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IpfsTable>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IpfsTable& from);
  void MergeFrom(const IpfsTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IpfsTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ipfskey = 1;
  void clear_ipfskey();
  static const int kIpfskeyFieldNumber = 1;
  const ::std::string& ipfskey() const;
  void set_ipfskey(const ::std::string& value);
  #if LANG_CXX11
  void set_ipfskey(::std::string&& value);
  #endif
  void set_ipfskey(const char* value);
  void set_ipfskey(const char* value, size_t size);
  ::std::string* mutable_ipfskey();
  ::std::string* release_ipfskey();
  void set_allocated_ipfskey(::std::string* ipfskey);

  // string orgNo = 2;
  void clear_orgno();
  static const int kOrgNoFieldNumber = 2;
  const ::std::string& orgno() const;
  void set_orgno(const ::std::string& value);
  #if LANG_CXX11
  void set_orgno(::std::string&& value);
  #endif
  void set_orgno(const char* value);
  void set_orgno(const char* value, size_t size);
  ::std::string* mutable_orgno();
  ::std::string* release_orgno();
  void set_allocated_orgno(::std::string* orgno);

  // string productBatchNo = 3;
  void clear_productbatchno();
  static const int kProductBatchNoFieldNumber = 3;
  const ::std::string& productbatchno() const;
  void set_productbatchno(const ::std::string& value);
  #if LANG_CXX11
  void set_productbatchno(::std::string&& value);
  #endif
  void set_productbatchno(const char* value);
  void set_productbatchno(const char* value, size_t size);
  ::std::string* mutable_productbatchno();
  ::std::string* release_productbatchno();
  void set_allocated_productbatchno(::std::string* productbatchno);

  // string productCode = 4;
  void clear_productcode();
  static const int kProductCodeFieldNumber = 4;
  const ::std::string& productcode() const;
  void set_productcode(const ::std::string& value);
  #if LANG_CXX11
  void set_productcode(::std::string&& value);
  #endif
  void set_productcode(const char* value);
  void set_productcode(const char* value, size_t size);
  ::std::string* mutable_productcode();
  ::std::string* release_productcode();
  void set_allocated_productcode(::std::string* productcode);

  // string submitTime = 5;
  void clear_submittime();
  static const int kSubmitTimeFieldNumber = 5;
  const ::std::string& submittime() const;
  void set_submittime(const ::std::string& value);
  #if LANG_CXX11
  void set_submittime(::std::string&& value);
  #endif
  void set_submittime(const char* value);
  void set_submittime(const char* value, size_t size);
  ::std::string* mutable_submittime();
  ::std::string* release_submittime();
  void set_allocated_submittime(::std::string* submittime);

  // @@protoc_insertion_point(class_scope:Traceability.IpfsTable)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ipfskey_;
  ::google::protobuf::internal::ArenaStringPtr orgno_;
  ::google::protobuf::internal::ArenaStringPtr productbatchno_;
  ::google::protobuf::internal::ArenaStringPtr productcode_;
  ::google::protobuf::internal::ArenaStringPtr submittime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Traceability_2eproto;
};
// -------------------------------------------------------------------

class ProductTable :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Traceability.ProductTable) */ {
 public:
  ProductTable();
  virtual ~ProductTable();

  ProductTable(const ProductTable& from);

  inline ProductTable& operator=(const ProductTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProductTable(ProductTable&& from) noexcept
    : ProductTable() {
    *this = ::std::move(from);
  }

  inline ProductTable& operator=(ProductTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ProductTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProductTable* internal_default_instance() {
    return reinterpret_cast<const ProductTable*>(
               &_ProductTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ProductTable* other);
  friend void swap(ProductTable& a, ProductTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProductTable* New() const final {
    return CreateMaybeMessage<ProductTable>(nullptr);
  }

  ProductTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProductTable>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ProductTable& from);
  void MergeFrom(const ProductTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProductTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string orgNo = 1;
  void clear_orgno();
  static const int kOrgNoFieldNumber = 1;
  const ::std::string& orgno() const;
  void set_orgno(const ::std::string& value);
  #if LANG_CXX11
  void set_orgno(::std::string&& value);
  #endif
  void set_orgno(const char* value);
  void set_orgno(const char* value, size_t size);
  ::std::string* mutable_orgno();
  ::std::string* release_orgno();
  void set_allocated_orgno(::std::string* orgno);

  // string productBatchNo = 2;
  void clear_productbatchno();
  static const int kProductBatchNoFieldNumber = 2;
  const ::std::string& productbatchno() const;
  void set_productbatchno(const ::std::string& value);
  #if LANG_CXX11
  void set_productbatchno(::std::string&& value);
  #endif
  void set_productbatchno(const char* value);
  void set_productbatchno(const char* value, size_t size);
  ::std::string* mutable_productbatchno();
  ::std::string* release_productbatchno();
  void set_allocated_productbatchno(::std::string* productbatchno);

  // string filesHash = 3;
  void clear_fileshash();
  static const int kFilesHashFieldNumber = 3;
  const ::std::string& fileshash() const;
  void set_fileshash(const ::std::string& value);
  #if LANG_CXX11
  void set_fileshash(::std::string&& value);
  #endif
  void set_fileshash(const char* value);
  void set_fileshash(const char* value, size_t size);
  ::std::string* mutable_fileshash();
  ::std::string* release_fileshash();
  void set_allocated_fileshash(::std::string* fileshash);

  // string fileType = 4;
  void clear_filetype();
  static const int kFileTypeFieldNumber = 4;
  const ::std::string& filetype() const;
  void set_filetype(const ::std::string& value);
  #if LANG_CXX11
  void set_filetype(::std::string&& value);
  #endif
  void set_filetype(const char* value);
  void set_filetype(const char* value, size_t size);
  ::std::string* mutable_filetype();
  ::std::string* release_filetype();
  void set_allocated_filetype(::std::string* filetype);

  // string address = 5;
  void clear_address();
  static const int kAddressFieldNumber = 5;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string lat = 6;
  void clear_lat();
  static const int kLatFieldNumber = 6;
  const ::std::string& lat() const;
  void set_lat(const ::std::string& value);
  #if LANG_CXX11
  void set_lat(::std::string&& value);
  #endif
  void set_lat(const char* value);
  void set_lat(const char* value, size_t size);
  ::std::string* mutable_lat();
  ::std::string* release_lat();
  void set_allocated_lat(::std::string* lat);

  // string lng = 7;
  void clear_lng();
  static const int kLngFieldNumber = 7;
  const ::std::string& lng() const;
  void set_lng(const ::std::string& value);
  #if LANG_CXX11
  void set_lng(::std::string&& value);
  #endif
  void set_lng(const char* value);
  void set_lng(const char* value, size_t size);
  ::std::string* mutable_lng();
  ::std::string* release_lng();
  void set_allocated_lng(::std::string* lng);

  // string createTime = 8;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 8;
  const ::std::string& createtime() const;
  void set_createtime(const ::std::string& value);
  #if LANG_CXX11
  void set_createtime(::std::string&& value);
  #endif
  void set_createtime(const char* value);
  void set_createtime(const char* value, size_t size);
  ::std::string* mutable_createtime();
  ::std::string* release_createtime();
  void set_allocated_createtime(::std::string* createtime);

  // string updateTime = 9;
  void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 9;
  const ::std::string& updatetime() const;
  void set_updatetime(const ::std::string& value);
  #if LANG_CXX11
  void set_updatetime(::std::string&& value);
  #endif
  void set_updatetime(const char* value);
  void set_updatetime(const char* value, size_t size);
  ::std::string* mutable_updatetime();
  ::std::string* release_updatetime();
  void set_allocated_updatetime(::std::string* updatetime);

  // string pinfoRecordId = 10;
  void clear_pinforecordid();
  static const int kPinfoRecordIdFieldNumber = 10;
  const ::std::string& pinforecordid() const;
  void set_pinforecordid(const ::std::string& value);
  #if LANG_CXX11
  void set_pinforecordid(::std::string&& value);
  #endif
  void set_pinforecordid(const char* value);
  void set_pinforecordid(const char* value, size_t size);
  ::std::string* mutable_pinforecordid();
  ::std::string* release_pinforecordid();
  void set_allocated_pinforecordid(::std::string* pinforecordid);

  // string paccount = 11;
  void clear_paccount();
  static const int kPaccountFieldNumber = 11;
  const ::std::string& paccount() const;
  void set_paccount(const ::std::string& value);
  #if LANG_CXX11
  void set_paccount(::std::string&& value);
  #endif
  void set_paccount(const char* value);
  void set_paccount(const char* value, size_t size);
  ::std::string* mutable_paccount();
  ::std::string* release_paccount();
  void set_allocated_paccount(::std::string* paccount);

  // string puserId = 12;
  void clear_puserid();
  static const int kPuserIdFieldNumber = 12;
  const ::std::string& puserid() const;
  void set_puserid(const ::std::string& value);
  #if LANG_CXX11
  void set_puserid(::std::string&& value);
  #endif
  void set_puserid(const char* value);
  void set_puserid(const char* value, size_t size);
  ::std::string* mutable_puserid();
  ::std::string* release_puserid();
  void set_allocated_puserid(::std::string* puserid);

  // string proleName = 13;
  void clear_prolename();
  static const int kProleNameFieldNumber = 13;
  const ::std::string& prolename() const;
  void set_prolename(const ::std::string& value);
  #if LANG_CXX11
  void set_prolename(::std::string&& value);
  #endif
  void set_prolename(const char* value);
  void set_prolename(const char* value, size_t size);
  ::std::string* mutable_prolename();
  ::std::string* release_prolename();
  void set_allocated_prolename(::std::string* prolename);

  // string premark = 14;
  void clear_premark();
  static const int kPremarkFieldNumber = 14;
  const ::std::string& premark() const;
  void set_premark(const ::std::string& value);
  #if LANG_CXX11
  void set_premark(::std::string&& value);
  #endif
  void set_premark(const char* value);
  void set_premark(const char* value, size_t size);
  ::std::string* mutable_premark();
  ::std::string* release_premark();
  void set_allocated_premark(::std::string* premark);

  // string proleId = 15;
  void clear_proleid();
  static const int kProleIdFieldNumber = 15;
  const ::std::string& proleid() const;
  void set_proleid(const ::std::string& value);
  #if LANG_CXX11
  void set_proleid(::std::string&& value);
  #endif
  void set_proleid(const char* value);
  void set_proleid(const char* value, size_t size);
  ::std::string* mutable_proleid();
  ::std::string* release_proleid();
  void set_allocated_proleid(::std::string* proleid);

  // string puserName = 16;
  void clear_pusername();
  static const int kPuserNameFieldNumber = 16;
  const ::std::string& pusername() const;
  void set_pusername(const ::std::string& value);
  #if LANG_CXX11
  void set_pusername(::std::string&& value);
  #endif
  void set_pusername(const char* value);
  void set_pusername(const char* value, size_t size);
  ::std::string* mutable_pusername();
  ::std::string* release_pusername();
  void set_allocated_pusername(::std::string* pusername);

  // @@protoc_insertion_point(class_scope:Traceability.ProductTable)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr orgno_;
  ::google::protobuf::internal::ArenaStringPtr productbatchno_;
  ::google::protobuf::internal::ArenaStringPtr fileshash_;
  ::google::protobuf::internal::ArenaStringPtr filetype_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr lat_;
  ::google::protobuf::internal::ArenaStringPtr lng_;
  ::google::protobuf::internal::ArenaStringPtr createtime_;
  ::google::protobuf::internal::ArenaStringPtr updatetime_;
  ::google::protobuf::internal::ArenaStringPtr pinforecordid_;
  ::google::protobuf::internal::ArenaStringPtr paccount_;
  ::google::protobuf::internal::ArenaStringPtr puserid_;
  ::google::protobuf::internal::ArenaStringPtr prolename_;
  ::google::protobuf::internal::ArenaStringPtr premark_;
  ::google::protobuf::internal::ArenaStringPtr proleid_;
  ::google::protobuf::internal::ArenaStringPtr pusername_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Traceability_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IpfsTable

// string ipfskey = 1;
inline void IpfsTable::clear_ipfskey() {
  ipfskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IpfsTable::ipfskey() const {
  // @@protoc_insertion_point(field_get:Traceability.IpfsTable.ipfskey)
  return ipfskey_.GetNoArena();
}
inline void IpfsTable::set_ipfskey(const ::std::string& value) {
  
  ipfskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.IpfsTable.ipfskey)
}
#if LANG_CXX11
inline void IpfsTable::set_ipfskey(::std::string&& value) {
  
  ipfskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.IpfsTable.ipfskey)
}
#endif
inline void IpfsTable::set_ipfskey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipfskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.IpfsTable.ipfskey)
}
inline void IpfsTable::set_ipfskey(const char* value, size_t size) {
  
  ipfskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.IpfsTable.ipfskey)
}
inline ::std::string* IpfsTable::mutable_ipfskey() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.IpfsTable.ipfskey)
  return ipfskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpfsTable::release_ipfskey() {
  // @@protoc_insertion_point(field_release:Traceability.IpfsTable.ipfskey)
  
  return ipfskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpfsTable::set_allocated_ipfskey(::std::string* ipfskey) {
  if (ipfskey != nullptr) {
    
  } else {
    
  }
  ipfskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipfskey);
  // @@protoc_insertion_point(field_set_allocated:Traceability.IpfsTable.ipfskey)
}

// string orgNo = 2;
inline void IpfsTable::clear_orgno() {
  orgno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IpfsTable::orgno() const {
  // @@protoc_insertion_point(field_get:Traceability.IpfsTable.orgNo)
  return orgno_.GetNoArena();
}
inline void IpfsTable::set_orgno(const ::std::string& value) {
  
  orgno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.IpfsTable.orgNo)
}
#if LANG_CXX11
inline void IpfsTable::set_orgno(::std::string&& value) {
  
  orgno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.IpfsTable.orgNo)
}
#endif
inline void IpfsTable::set_orgno(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orgno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.IpfsTable.orgNo)
}
inline void IpfsTable::set_orgno(const char* value, size_t size) {
  
  orgno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.IpfsTable.orgNo)
}
inline ::std::string* IpfsTable::mutable_orgno() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.IpfsTable.orgNo)
  return orgno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpfsTable::release_orgno() {
  // @@protoc_insertion_point(field_release:Traceability.IpfsTable.orgNo)
  
  return orgno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpfsTable::set_allocated_orgno(::std::string* orgno) {
  if (orgno != nullptr) {
    
  } else {
    
  }
  orgno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orgno);
  // @@protoc_insertion_point(field_set_allocated:Traceability.IpfsTable.orgNo)
}

// string productBatchNo = 3;
inline void IpfsTable::clear_productbatchno() {
  productbatchno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IpfsTable::productbatchno() const {
  // @@protoc_insertion_point(field_get:Traceability.IpfsTable.productBatchNo)
  return productbatchno_.GetNoArena();
}
inline void IpfsTable::set_productbatchno(const ::std::string& value) {
  
  productbatchno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.IpfsTable.productBatchNo)
}
#if LANG_CXX11
inline void IpfsTable::set_productbatchno(::std::string&& value) {
  
  productbatchno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.IpfsTable.productBatchNo)
}
#endif
inline void IpfsTable::set_productbatchno(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productbatchno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.IpfsTable.productBatchNo)
}
inline void IpfsTable::set_productbatchno(const char* value, size_t size) {
  
  productbatchno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.IpfsTable.productBatchNo)
}
inline ::std::string* IpfsTable::mutable_productbatchno() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.IpfsTable.productBatchNo)
  return productbatchno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpfsTable::release_productbatchno() {
  // @@protoc_insertion_point(field_release:Traceability.IpfsTable.productBatchNo)
  
  return productbatchno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpfsTable::set_allocated_productbatchno(::std::string* productbatchno) {
  if (productbatchno != nullptr) {
    
  } else {
    
  }
  productbatchno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productbatchno);
  // @@protoc_insertion_point(field_set_allocated:Traceability.IpfsTable.productBatchNo)
}

// string productCode = 4;
inline void IpfsTable::clear_productcode() {
  productcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IpfsTable::productcode() const {
  // @@protoc_insertion_point(field_get:Traceability.IpfsTable.productCode)
  return productcode_.GetNoArena();
}
inline void IpfsTable::set_productcode(const ::std::string& value) {
  
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.IpfsTable.productCode)
}
#if LANG_CXX11
inline void IpfsTable::set_productcode(::std::string&& value) {
  
  productcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.IpfsTable.productCode)
}
#endif
inline void IpfsTable::set_productcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.IpfsTable.productCode)
}
inline void IpfsTable::set_productcode(const char* value, size_t size) {
  
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.IpfsTable.productCode)
}
inline ::std::string* IpfsTable::mutable_productcode() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.IpfsTable.productCode)
  return productcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpfsTable::release_productcode() {
  // @@protoc_insertion_point(field_release:Traceability.IpfsTable.productCode)
  
  return productcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpfsTable::set_allocated_productcode(::std::string* productcode) {
  if (productcode != nullptr) {
    
  } else {
    
  }
  productcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productcode);
  // @@protoc_insertion_point(field_set_allocated:Traceability.IpfsTable.productCode)
}

// string submitTime = 5;
inline void IpfsTable::clear_submittime() {
  submittime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IpfsTable::submittime() const {
  // @@protoc_insertion_point(field_get:Traceability.IpfsTable.submitTime)
  return submittime_.GetNoArena();
}
inline void IpfsTable::set_submittime(const ::std::string& value) {
  
  submittime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.IpfsTable.submitTime)
}
#if LANG_CXX11
inline void IpfsTable::set_submittime(::std::string&& value) {
  
  submittime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.IpfsTable.submitTime)
}
#endif
inline void IpfsTable::set_submittime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  submittime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.IpfsTable.submitTime)
}
inline void IpfsTable::set_submittime(const char* value, size_t size) {
  
  submittime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.IpfsTable.submitTime)
}
inline ::std::string* IpfsTable::mutable_submittime() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.IpfsTable.submitTime)
  return submittime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpfsTable::release_submittime() {
  // @@protoc_insertion_point(field_release:Traceability.IpfsTable.submitTime)
  
  return submittime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpfsTable::set_allocated_submittime(::std::string* submittime) {
  if (submittime != nullptr) {
    
  } else {
    
  }
  submittime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), submittime);
  // @@protoc_insertion_point(field_set_allocated:Traceability.IpfsTable.submitTime)
}

// -------------------------------------------------------------------

// ProductTable

// string orgNo = 1;
inline void ProductTable::clear_orgno() {
  orgno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::orgno() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.orgNo)
  return orgno_.GetNoArena();
}
inline void ProductTable::set_orgno(const ::std::string& value) {
  
  orgno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.orgNo)
}
#if LANG_CXX11
inline void ProductTable::set_orgno(::std::string&& value) {
  
  orgno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.orgNo)
}
#endif
inline void ProductTable::set_orgno(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orgno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.orgNo)
}
inline void ProductTable::set_orgno(const char* value, size_t size) {
  
  orgno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.orgNo)
}
inline ::std::string* ProductTable::mutable_orgno() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.orgNo)
  return orgno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_orgno() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.orgNo)
  
  return orgno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_orgno(::std::string* orgno) {
  if (orgno != nullptr) {
    
  } else {
    
  }
  orgno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orgno);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.orgNo)
}

// string productBatchNo = 2;
inline void ProductTable::clear_productbatchno() {
  productbatchno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::productbatchno() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.productBatchNo)
  return productbatchno_.GetNoArena();
}
inline void ProductTable::set_productbatchno(const ::std::string& value) {
  
  productbatchno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.productBatchNo)
}
#if LANG_CXX11
inline void ProductTable::set_productbatchno(::std::string&& value) {
  
  productbatchno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.productBatchNo)
}
#endif
inline void ProductTable::set_productbatchno(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productbatchno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.productBatchNo)
}
inline void ProductTable::set_productbatchno(const char* value, size_t size) {
  
  productbatchno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.productBatchNo)
}
inline ::std::string* ProductTable::mutable_productbatchno() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.productBatchNo)
  return productbatchno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_productbatchno() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.productBatchNo)
  
  return productbatchno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_productbatchno(::std::string* productbatchno) {
  if (productbatchno != nullptr) {
    
  } else {
    
  }
  productbatchno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productbatchno);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.productBatchNo)
}

// string filesHash = 3;
inline void ProductTable::clear_fileshash() {
  fileshash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::fileshash() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.filesHash)
  return fileshash_.GetNoArena();
}
inline void ProductTable::set_fileshash(const ::std::string& value) {
  
  fileshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.filesHash)
}
#if LANG_CXX11
inline void ProductTable::set_fileshash(::std::string&& value) {
  
  fileshash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.filesHash)
}
#endif
inline void ProductTable::set_fileshash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fileshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.filesHash)
}
inline void ProductTable::set_fileshash(const char* value, size_t size) {
  
  fileshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.filesHash)
}
inline ::std::string* ProductTable::mutable_fileshash() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.filesHash)
  return fileshash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_fileshash() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.filesHash)
  
  return fileshash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_fileshash(::std::string* fileshash) {
  if (fileshash != nullptr) {
    
  } else {
    
  }
  fileshash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fileshash);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.filesHash)
}

// string fileType = 4;
inline void ProductTable::clear_filetype() {
  filetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::filetype() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.fileType)
  return filetype_.GetNoArena();
}
inline void ProductTable::set_filetype(const ::std::string& value) {
  
  filetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.fileType)
}
#if LANG_CXX11
inline void ProductTable::set_filetype(::std::string&& value) {
  
  filetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.fileType)
}
#endif
inline void ProductTable::set_filetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.fileType)
}
inline void ProductTable::set_filetype(const char* value, size_t size) {
  
  filetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.fileType)
}
inline ::std::string* ProductTable::mutable_filetype() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.fileType)
  return filetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_filetype() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.fileType)
  
  return filetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_filetype(::std::string* filetype) {
  if (filetype != nullptr) {
    
  } else {
    
  }
  filetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filetype);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.fileType)
}

// string address = 5;
inline void ProductTable::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::address() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.address)
  return address_.GetNoArena();
}
inline void ProductTable::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.address)
}
#if LANG_CXX11
inline void ProductTable::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.address)
}
#endif
inline void ProductTable::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.address)
}
inline void ProductTable::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.address)
}
inline ::std::string* ProductTable::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_address() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.address)
}

// string lat = 6;
inline void ProductTable::clear_lat() {
  lat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::lat() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.lat)
  return lat_.GetNoArena();
}
inline void ProductTable::set_lat(const ::std::string& value) {
  
  lat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.lat)
}
#if LANG_CXX11
inline void ProductTable::set_lat(::std::string&& value) {
  
  lat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.lat)
}
#endif
inline void ProductTable::set_lat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.lat)
}
inline void ProductTable::set_lat(const char* value, size_t size) {
  
  lat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.lat)
}
inline ::std::string* ProductTable::mutable_lat() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.lat)
  return lat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_lat() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.lat)
  
  return lat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_lat(::std::string* lat) {
  if (lat != nullptr) {
    
  } else {
    
  }
  lat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lat);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.lat)
}

// string lng = 7;
inline void ProductTable::clear_lng() {
  lng_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::lng() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.lng)
  return lng_.GetNoArena();
}
inline void ProductTable::set_lng(const ::std::string& value) {
  
  lng_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.lng)
}
#if LANG_CXX11
inline void ProductTable::set_lng(::std::string&& value) {
  
  lng_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.lng)
}
#endif
inline void ProductTable::set_lng(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lng_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.lng)
}
inline void ProductTable::set_lng(const char* value, size_t size) {
  
  lng_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.lng)
}
inline ::std::string* ProductTable::mutable_lng() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.lng)
  return lng_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_lng() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.lng)
  
  return lng_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_lng(::std::string* lng) {
  if (lng != nullptr) {
    
  } else {
    
  }
  lng_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lng);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.lng)
}

// string createTime = 8;
inline void ProductTable::clear_createtime() {
  createtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::createtime() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.createTime)
  return createtime_.GetNoArena();
}
inline void ProductTable::set_createtime(const ::std::string& value) {
  
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.createTime)
}
#if LANG_CXX11
inline void ProductTable::set_createtime(::std::string&& value) {
  
  createtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.createTime)
}
#endif
inline void ProductTable::set_createtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.createTime)
}
inline void ProductTable::set_createtime(const char* value, size_t size) {
  
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.createTime)
}
inline ::std::string* ProductTable::mutable_createtime() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.createTime)
  return createtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_createtime() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.createTime)
  
  return createtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_createtime(::std::string* createtime) {
  if (createtime != nullptr) {
    
  } else {
    
  }
  createtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createtime);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.createTime)
}

// string updateTime = 9;
inline void ProductTable::clear_updatetime() {
  updatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::updatetime() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.updateTime)
  return updatetime_.GetNoArena();
}
inline void ProductTable::set_updatetime(const ::std::string& value) {
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.updateTime)
}
#if LANG_CXX11
inline void ProductTable::set_updatetime(::std::string&& value) {
  
  updatetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.updateTime)
}
#endif
inline void ProductTable::set_updatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.updateTime)
}
inline void ProductTable::set_updatetime(const char* value, size_t size) {
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.updateTime)
}
inline ::std::string* ProductTable::mutable_updatetime() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.updateTime)
  return updatetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_updatetime() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.updateTime)
  
  return updatetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_updatetime(::std::string* updatetime) {
  if (updatetime != nullptr) {
    
  } else {
    
  }
  updatetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updatetime);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.updateTime)
}

// string pinfoRecordId = 10;
inline void ProductTable::clear_pinforecordid() {
  pinforecordid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::pinforecordid() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.pinfoRecordId)
  return pinforecordid_.GetNoArena();
}
inline void ProductTable::set_pinforecordid(const ::std::string& value) {
  
  pinforecordid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.pinfoRecordId)
}
#if LANG_CXX11
inline void ProductTable::set_pinforecordid(::std::string&& value) {
  
  pinforecordid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.pinfoRecordId)
}
#endif
inline void ProductTable::set_pinforecordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pinforecordid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.pinfoRecordId)
}
inline void ProductTable::set_pinforecordid(const char* value, size_t size) {
  
  pinforecordid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.pinfoRecordId)
}
inline ::std::string* ProductTable::mutable_pinforecordid() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.pinfoRecordId)
  return pinforecordid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_pinforecordid() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.pinfoRecordId)
  
  return pinforecordid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_pinforecordid(::std::string* pinforecordid) {
  if (pinforecordid != nullptr) {
    
  } else {
    
  }
  pinforecordid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pinforecordid);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.pinfoRecordId)
}

// string paccount = 11;
inline void ProductTable::clear_paccount() {
  paccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::paccount() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.paccount)
  return paccount_.GetNoArena();
}
inline void ProductTable::set_paccount(const ::std::string& value) {
  
  paccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.paccount)
}
#if LANG_CXX11
inline void ProductTable::set_paccount(::std::string&& value) {
  
  paccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.paccount)
}
#endif
inline void ProductTable::set_paccount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.paccount)
}
inline void ProductTable::set_paccount(const char* value, size_t size) {
  
  paccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.paccount)
}
inline ::std::string* ProductTable::mutable_paccount() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.paccount)
  return paccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_paccount() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.paccount)
  
  return paccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_paccount(::std::string* paccount) {
  if (paccount != nullptr) {
    
  } else {
    
  }
  paccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paccount);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.paccount)
}

// string puserId = 12;
inline void ProductTable::clear_puserid() {
  puserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::puserid() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.puserId)
  return puserid_.GetNoArena();
}
inline void ProductTable::set_puserid(const ::std::string& value) {
  
  puserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.puserId)
}
#if LANG_CXX11
inline void ProductTable::set_puserid(::std::string&& value) {
  
  puserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.puserId)
}
#endif
inline void ProductTable::set_puserid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  puserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.puserId)
}
inline void ProductTable::set_puserid(const char* value, size_t size) {
  
  puserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.puserId)
}
inline ::std::string* ProductTable::mutable_puserid() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.puserId)
  return puserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_puserid() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.puserId)
  
  return puserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_puserid(::std::string* puserid) {
  if (puserid != nullptr) {
    
  } else {
    
  }
  puserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), puserid);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.puserId)
}

// string proleName = 13;
inline void ProductTable::clear_prolename() {
  prolename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::prolename() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.proleName)
  return prolename_.GetNoArena();
}
inline void ProductTable::set_prolename(const ::std::string& value) {
  
  prolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.proleName)
}
#if LANG_CXX11
inline void ProductTable::set_prolename(::std::string&& value) {
  
  prolename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.proleName)
}
#endif
inline void ProductTable::set_prolename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.proleName)
}
inline void ProductTable::set_prolename(const char* value, size_t size) {
  
  prolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.proleName)
}
inline ::std::string* ProductTable::mutable_prolename() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.proleName)
  return prolename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_prolename() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.proleName)
  
  return prolename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_prolename(::std::string* prolename) {
  if (prolename != nullptr) {
    
  } else {
    
  }
  prolename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prolename);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.proleName)
}

// string premark = 14;
inline void ProductTable::clear_premark() {
  premark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::premark() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.premark)
  return premark_.GetNoArena();
}
inline void ProductTable::set_premark(const ::std::string& value) {
  
  premark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.premark)
}
#if LANG_CXX11
inline void ProductTable::set_premark(::std::string&& value) {
  
  premark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.premark)
}
#endif
inline void ProductTable::set_premark(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  premark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.premark)
}
inline void ProductTable::set_premark(const char* value, size_t size) {
  
  premark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.premark)
}
inline ::std::string* ProductTable::mutable_premark() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.premark)
  return premark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_premark() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.premark)
  
  return premark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_premark(::std::string* premark) {
  if (premark != nullptr) {
    
  } else {
    
  }
  premark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), premark);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.premark)
}

// string proleId = 15;
inline void ProductTable::clear_proleid() {
  proleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::proleid() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.proleId)
  return proleid_.GetNoArena();
}
inline void ProductTable::set_proleid(const ::std::string& value) {
  
  proleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.proleId)
}
#if LANG_CXX11
inline void ProductTable::set_proleid(::std::string&& value) {
  
  proleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.proleId)
}
#endif
inline void ProductTable::set_proleid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.proleId)
}
inline void ProductTable::set_proleid(const char* value, size_t size) {
  
  proleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.proleId)
}
inline ::std::string* ProductTable::mutable_proleid() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.proleId)
  return proleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_proleid() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.proleId)
  
  return proleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_proleid(::std::string* proleid) {
  if (proleid != nullptr) {
    
  } else {
    
  }
  proleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proleid);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.proleId)
}

// string puserName = 16;
inline void ProductTable::clear_pusername() {
  pusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::pusername() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.puserName)
  return pusername_.GetNoArena();
}
inline void ProductTable::set_pusername(const ::std::string& value) {
  
  pusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.puserName)
}
#if LANG_CXX11
inline void ProductTable::set_pusername(::std::string&& value) {
  
  pusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.puserName)
}
#endif
inline void ProductTable::set_pusername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.puserName)
}
inline void ProductTable::set_pusername(const char* value, size_t size) {
  
  pusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.puserName)
}
inline ::std::string* ProductTable::mutable_pusername() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.puserName)
  return pusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_pusername() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.puserName)
  
  return pusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_pusername(::std::string* pusername) {
  if (pusername != nullptr) {
    
  } else {
    
  }
  pusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pusername);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.puserName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Traceability

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_Traceability_2eproto
