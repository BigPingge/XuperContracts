// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Traceability.proto

#ifndef PROTOBUF_INCLUDED_Traceability_2eproto
#define PROTOBUF_INCLUDED_Traceability_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Traceability_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_Traceability_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
namespace Traceability {
class IpfsTable;
class IpfsTableDefaultTypeInternal;
extern IpfsTableDefaultTypeInternal _IpfsTable_default_instance_;
class ProductTable;
class ProductTableDefaultTypeInternal;
extern ProductTableDefaultTypeInternal _ProductTable_default_instance_;
}  // namespace Traceability
namespace google {
namespace protobuf {
template<> ::Traceability::IpfsTable* Arena::CreateMaybeMessage<::Traceability::IpfsTable>(Arena*);
template<> ::Traceability::ProductTable* Arena::CreateMaybeMessage<::Traceability::ProductTable>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Traceability {

// ===================================================================

class IpfsTable :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Traceability.IpfsTable) */ {
 public:
  IpfsTable();
  virtual ~IpfsTable();

  IpfsTable(const IpfsTable& from);

  inline IpfsTable& operator=(const IpfsTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IpfsTable(IpfsTable&& from) noexcept
    : IpfsTable() {
    *this = ::std::move(from);
  }

  inline IpfsTable& operator=(IpfsTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const IpfsTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpfsTable* internal_default_instance() {
    return reinterpret_cast<const IpfsTable*>(
               &_IpfsTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(IpfsTable* other);
  friend void swap(IpfsTable& a, IpfsTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IpfsTable* New() const final {
    return CreateMaybeMessage<IpfsTable>(nullptr);
  }

  IpfsTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IpfsTable>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IpfsTable& from);
  void MergeFrom(const IpfsTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IpfsTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ipfskey = 1;
  void clear_ipfskey();
  static const int kIpfskeyFieldNumber = 1;
  const ::std::string& ipfskey() const;
  void set_ipfskey(const ::std::string& value);
  #if LANG_CXX11
  void set_ipfskey(::std::string&& value);
  #endif
  void set_ipfskey(const char* value);
  void set_ipfskey(const char* value, size_t size);
  ::std::string* mutable_ipfskey();
  ::std::string* release_ipfskey();
  void set_allocated_ipfskey(::std::string* ipfskey);

  // string ipfshash = 2;
  void clear_ipfshash();
  static const int kIpfshashFieldNumber = 2;
  const ::std::string& ipfshash() const;
  void set_ipfshash(const ::std::string& value);
  #if LANG_CXX11
  void set_ipfshash(::std::string&& value);
  #endif
  void set_ipfshash(const char* value);
  void set_ipfshash(const char* value, size_t size);
  ::std::string* mutable_ipfshash();
  ::std::string* release_ipfshash();
  void set_allocated_ipfshash(::std::string* ipfshash);

  // string orgNo = 3;
  void clear_orgno();
  static const int kOrgNoFieldNumber = 3;
  const ::std::string& orgno() const;
  void set_orgno(const ::std::string& value);
  #if LANG_CXX11
  void set_orgno(::std::string&& value);
  #endif
  void set_orgno(const char* value);
  void set_orgno(const char* value, size_t size);
  ::std::string* mutable_orgno();
  ::std::string* release_orgno();
  void set_allocated_orgno(::std::string* orgno);

  // string productBatchNo = 4;
  void clear_productbatchno();
  static const int kProductBatchNoFieldNumber = 4;
  const ::std::string& productbatchno() const;
  void set_productbatchno(const ::std::string& value);
  #if LANG_CXX11
  void set_productbatchno(::std::string&& value);
  #endif
  void set_productbatchno(const char* value);
  void set_productbatchno(const char* value, size_t size);
  ::std::string* mutable_productbatchno();
  ::std::string* release_productbatchno();
  void set_allocated_productbatchno(::std::string* productbatchno);

  // string productCode = 5;
  void clear_productcode();
  static const int kProductCodeFieldNumber = 5;
  const ::std::string& productcode() const;
  void set_productcode(const ::std::string& value);
  #if LANG_CXX11
  void set_productcode(::std::string&& value);
  #endif
  void set_productcode(const char* value);
  void set_productcode(const char* value, size_t size);
  ::std::string* mutable_productcode();
  ::std::string* release_productcode();
  void set_allocated_productcode(::std::string* productcode);

  // string submitTime = 6;
  void clear_submittime();
  static const int kSubmitTimeFieldNumber = 6;
  const ::std::string& submittime() const;
  void set_submittime(const ::std::string& value);
  #if LANG_CXX11
  void set_submittime(::std::string&& value);
  #endif
  void set_submittime(const char* value);
  void set_submittime(const char* value, size_t size);
  ::std::string* mutable_submittime();
  ::std::string* release_submittime();
  void set_allocated_submittime(::std::string* submittime);

  // @@protoc_insertion_point(class_scope:Traceability.IpfsTable)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ipfskey_;
  ::google::protobuf::internal::ArenaStringPtr ipfshash_;
  ::google::protobuf::internal::ArenaStringPtr orgno_;
  ::google::protobuf::internal::ArenaStringPtr productbatchno_;
  ::google::protobuf::internal::ArenaStringPtr productcode_;
  ::google::protobuf::internal::ArenaStringPtr submittime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Traceability_2eproto;
};
// -------------------------------------------------------------------

class ProductTable :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Traceability.ProductTable) */ {
 public:
  ProductTable();
  virtual ~ProductTable();

  ProductTable(const ProductTable& from);

  inline ProductTable& operator=(const ProductTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProductTable(ProductTable&& from) noexcept
    : ProductTable() {
    *this = ::std::move(from);
  }

  inline ProductTable& operator=(ProductTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ProductTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProductTable* internal_default_instance() {
    return reinterpret_cast<const ProductTable*>(
               &_ProductTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ProductTable* other);
  friend void swap(ProductTable& a, ProductTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProductTable* New() const final {
    return CreateMaybeMessage<ProductTable>(nullptr);
  }

  ProductTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProductTable>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ProductTable& from);
  void MergeFrom(const ProductTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProductTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string productkey = 1;
  void clear_productkey();
  static const int kProductkeyFieldNumber = 1;
  const ::std::string& productkey() const;
  void set_productkey(const ::std::string& value);
  #if LANG_CXX11
  void set_productkey(::std::string&& value);
  #endif
  void set_productkey(const char* value);
  void set_productkey(const char* value, size_t size);
  ::std::string* mutable_productkey();
  ::std::string* release_productkey();
  void set_allocated_productkey(::std::string* productkey);

  // string account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string address = 3;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string batchNo = 4;
  void clear_batchno();
  static const int kBatchNoFieldNumber = 4;
  const ::std::string& batchno() const;
  void set_batchno(const ::std::string& value);
  #if LANG_CXX11
  void set_batchno(::std::string&& value);
  #endif
  void set_batchno(const char* value);
  void set_batchno(const char* value, size_t size);
  ::std::string* mutable_batchno();
  ::std::string* release_batchno();
  void set_allocated_batchno(::std::string* batchno);

  // string confirm = 5;
  void clear_confirm();
  static const int kConfirmFieldNumber = 5;
  const ::std::string& confirm() const;
  void set_confirm(const ::std::string& value);
  #if LANG_CXX11
  void set_confirm(::std::string&& value);
  #endif
  void set_confirm(const char* value);
  void set_confirm(const char* value, size_t size);
  ::std::string* mutable_confirm();
  ::std::string* release_confirm();
  void set_allocated_confirm(::std::string* confirm);

  // string createTime = 6;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 6;
  const ::std::string& createtime() const;
  void set_createtime(const ::std::string& value);
  #if LANG_CXX11
  void set_createtime(::std::string&& value);
  #endif
  void set_createtime(const char* value);
  void set_createtime(const char* value, size_t size);
  ::std::string* mutable_createtime();
  ::std::string* release_createtime();
  void set_allocated_createtime(::std::string* createtime);

  // string id = 7;
  void clear_id();
  static const int kIdFieldNumber = 7;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string key = 8;
  void clear_key();
  static const int kKeyFieldNumber = 8;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string lat = 9;
  void clear_lat();
  static const int kLatFieldNumber = 9;
  const ::std::string& lat() const;
  void set_lat(const ::std::string& value);
  #if LANG_CXX11
  void set_lat(::std::string&& value);
  #endif
  void set_lat(const char* value);
  void set_lat(const char* value, size_t size);
  ::std::string* mutable_lat();
  ::std::string* release_lat();
  void set_allocated_lat(::std::string* lat);

  // string lng = 10;
  void clear_lng();
  static const int kLngFieldNumber = 10;
  const ::std::string& lng() const;
  void set_lng(const ::std::string& value);
  #if LANG_CXX11
  void set_lng(::std::string&& value);
  #endif
  void set_lng(const char* value);
  void set_lng(const char* value, size_t size);
  ::std::string* mutable_lng();
  ::std::string* release_lng();
  void set_allocated_lng(::std::string* lng);

  // string orgId = 11;
  void clear_orgid();
  static const int kOrgIdFieldNumber = 11;
  const ::std::string& orgid() const;
  void set_orgid(const ::std::string& value);
  #if LANG_CXX11
  void set_orgid(::std::string&& value);
  #endif
  void set_orgid(const char* value);
  void set_orgid(const char* value, size_t size);
  ::std::string* mutable_orgid();
  ::std::string* release_orgid();
  void set_allocated_orgid(::std::string* orgid);

  // string picHash = 12;
  void clear_pichash();
  static const int kPicHashFieldNumber = 12;
  const ::std::string& pichash() const;
  void set_pichash(const ::std::string& value);
  #if LANG_CXX11
  void set_pichash(::std::string&& value);
  #endif
  void set_pichash(const char* value);
  void set_pichash(const char* value, size_t size);
  ::std::string* mutable_pichash();
  ::std::string* release_pichash();
  void set_allocated_pichash(::std::string* pichash);

  // string picture = 13;
  void clear_picture();
  static const int kPictureFieldNumber = 13;
  const ::std::string& picture() const;
  void set_picture(const ::std::string& value);
  #if LANG_CXX11
  void set_picture(::std::string&& value);
  #endif
  void set_picture(const char* value);
  void set_picture(const char* value, size_t size);
  ::std::string* mutable_picture();
  ::std::string* release_picture();
  void set_allocated_picture(::std::string* picture);

  // string roleId = 14;
  void clear_roleid();
  static const int kRoleIdFieldNumber = 14;
  const ::std::string& roleid() const;
  void set_roleid(const ::std::string& value);
  #if LANG_CXX11
  void set_roleid(::std::string&& value);
  #endif
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  ::std::string* mutable_roleid();
  ::std::string* release_roleid();
  void set_allocated_roleid(::std::string* roleid);

  // string roleName = 15;
  void clear_rolename();
  static const int kRoleNameFieldNumber = 15;
  const ::std::string& rolename() const;
  void set_rolename(const ::std::string& value);
  #if LANG_CXX11
  void set_rolename(::std::string&& value);
  #endif
  void set_rolename(const char* value);
  void set_rolename(const char* value, size_t size);
  ::std::string* mutable_rolename();
  ::std::string* release_rolename();
  void set_allocated_rolename(::std::string* rolename);

  // string status = 16;
  void clear_status();
  static const int kStatusFieldNumber = 16;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // string submitTime = 17;
  void clear_submittime();
  static const int kSubmitTimeFieldNumber = 17;
  const ::std::string& submittime() const;
  void set_submittime(const ::std::string& value);
  #if LANG_CXX11
  void set_submittime(::std::string&& value);
  #endif
  void set_submittime(const char* value);
  void set_submittime(const char* value, size_t size);
  ::std::string* mutable_submittime();
  ::std::string* release_submittime();
  void set_allocated_submittime(::std::string* submittime);

  // string transactionId = 18;
  void clear_transactionid();
  static const int kTransactionIdFieldNumber = 18;
  const ::std::string& transactionid() const;
  void set_transactionid(const ::std::string& value);
  #if LANG_CXX11
  void set_transactionid(::std::string&& value);
  #endif
  void set_transactionid(const char* value);
  void set_transactionid(const char* value, size_t size);
  ::std::string* mutable_transactionid();
  ::std::string* release_transactionid();
  void set_allocated_transactionid(::std::string* transactionid);

  // string type = 19;
  void clear_type();
  static const int kTypeFieldNumber = 19;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string updateTime = 20;
  void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 20;
  const ::std::string& updatetime() const;
  void set_updatetime(const ::std::string& value);
  #if LANG_CXX11
  void set_updatetime(::std::string&& value);
  #endif
  void set_updatetime(const char* value);
  void set_updatetime(const char* value, size_t size);
  ::std::string* mutable_updatetime();
  ::std::string* release_updatetime();
  void set_allocated_updatetime(::std::string* updatetime);

  // string uploadTimes = 21;
  void clear_uploadtimes();
  static const int kUploadTimesFieldNumber = 21;
  const ::std::string& uploadtimes() const;
  void set_uploadtimes(const ::std::string& value);
  #if LANG_CXX11
  void set_uploadtimes(::std::string&& value);
  #endif
  void set_uploadtimes(const char* value);
  void set_uploadtimes(const char* value, size_t size);
  ::std::string* mutable_uploadtimes();
  ::std::string* release_uploadtimes();
  void set_allocated_uploadtimes(::std::string* uploadtimes);

  // string userId = 22;
  void clear_userid();
  static const int kUserIdFieldNumber = 22;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // string userName = 23;
  void clear_username();
  static const int kUserNameFieldNumber = 23;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string userUUID = 24;
  void clear_useruuid();
  static const int kUserUUIDFieldNumber = 24;
  const ::std::string& useruuid() const;
  void set_useruuid(const ::std::string& value);
  #if LANG_CXX11
  void set_useruuid(::std::string&& value);
  #endif
  void set_useruuid(const char* value);
  void set_useruuid(const char* value, size_t size);
  ::std::string* mutable_useruuid();
  ::std::string* release_useruuid();
  void set_allocated_useruuid(::std::string* useruuid);

  // string work = 25;
  void clear_work();
  static const int kWorkFieldNumber = 25;
  const ::std::string& work() const;
  void set_work(const ::std::string& value);
  #if LANG_CXX11
  void set_work(::std::string&& value);
  #endif
  void set_work(const char* value);
  void set_work(const char* value, size_t size);
  ::std::string* mutable_work();
  ::std::string* release_work();
  void set_allocated_work(::std::string* work);

  // @@protoc_insertion_point(class_scope:Traceability.ProductTable)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr productkey_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr batchno_;
  ::google::protobuf::internal::ArenaStringPtr confirm_;
  ::google::protobuf::internal::ArenaStringPtr createtime_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr lat_;
  ::google::protobuf::internal::ArenaStringPtr lng_;
  ::google::protobuf::internal::ArenaStringPtr orgid_;
  ::google::protobuf::internal::ArenaStringPtr pichash_;
  ::google::protobuf::internal::ArenaStringPtr picture_;
  ::google::protobuf::internal::ArenaStringPtr roleid_;
  ::google::protobuf::internal::ArenaStringPtr rolename_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr submittime_;
  ::google::protobuf::internal::ArenaStringPtr transactionid_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr updatetime_;
  ::google::protobuf::internal::ArenaStringPtr uploadtimes_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr useruuid_;
  ::google::protobuf::internal::ArenaStringPtr work_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Traceability_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IpfsTable

// string ipfskey = 1;
inline void IpfsTable::clear_ipfskey() {
  ipfskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IpfsTable::ipfskey() const {
  // @@protoc_insertion_point(field_get:Traceability.IpfsTable.ipfskey)
  return ipfskey_.GetNoArena();
}
inline void IpfsTable::set_ipfskey(const ::std::string& value) {
  
  ipfskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.IpfsTable.ipfskey)
}
#if LANG_CXX11
inline void IpfsTable::set_ipfskey(::std::string&& value) {
  
  ipfskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.IpfsTable.ipfskey)
}
#endif
inline void IpfsTable::set_ipfskey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipfskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.IpfsTable.ipfskey)
}
inline void IpfsTable::set_ipfskey(const char* value, size_t size) {
  
  ipfskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.IpfsTable.ipfskey)
}
inline ::std::string* IpfsTable::mutable_ipfskey() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.IpfsTable.ipfskey)
  return ipfskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpfsTable::release_ipfskey() {
  // @@protoc_insertion_point(field_release:Traceability.IpfsTable.ipfskey)
  
  return ipfskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpfsTable::set_allocated_ipfskey(::std::string* ipfskey) {
  if (ipfskey != nullptr) {
    
  } else {
    
  }
  ipfskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipfskey);
  // @@protoc_insertion_point(field_set_allocated:Traceability.IpfsTable.ipfskey)
}

// string ipfshash = 2;
inline void IpfsTable::clear_ipfshash() {
  ipfshash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IpfsTable::ipfshash() const {
  // @@protoc_insertion_point(field_get:Traceability.IpfsTable.ipfshash)
  return ipfshash_.GetNoArena();
}
inline void IpfsTable::set_ipfshash(const ::std::string& value) {
  
  ipfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.IpfsTable.ipfshash)
}
#if LANG_CXX11
inline void IpfsTable::set_ipfshash(::std::string&& value) {
  
  ipfshash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.IpfsTable.ipfshash)
}
#endif
inline void IpfsTable::set_ipfshash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.IpfsTable.ipfshash)
}
inline void IpfsTable::set_ipfshash(const char* value, size_t size) {
  
  ipfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.IpfsTable.ipfshash)
}
inline ::std::string* IpfsTable::mutable_ipfshash() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.IpfsTable.ipfshash)
  return ipfshash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpfsTable::release_ipfshash() {
  // @@protoc_insertion_point(field_release:Traceability.IpfsTable.ipfshash)
  
  return ipfshash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpfsTable::set_allocated_ipfshash(::std::string* ipfshash) {
  if (ipfshash != nullptr) {
    
  } else {
    
  }
  ipfshash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipfshash);
  // @@protoc_insertion_point(field_set_allocated:Traceability.IpfsTable.ipfshash)
}

// string orgNo = 3;
inline void IpfsTable::clear_orgno() {
  orgno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IpfsTable::orgno() const {
  // @@protoc_insertion_point(field_get:Traceability.IpfsTable.orgNo)
  return orgno_.GetNoArena();
}
inline void IpfsTable::set_orgno(const ::std::string& value) {
  
  orgno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.IpfsTable.orgNo)
}
#if LANG_CXX11
inline void IpfsTable::set_orgno(::std::string&& value) {
  
  orgno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.IpfsTable.orgNo)
}
#endif
inline void IpfsTable::set_orgno(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orgno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.IpfsTable.orgNo)
}
inline void IpfsTable::set_orgno(const char* value, size_t size) {
  
  orgno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.IpfsTable.orgNo)
}
inline ::std::string* IpfsTable::mutable_orgno() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.IpfsTable.orgNo)
  return orgno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpfsTable::release_orgno() {
  // @@protoc_insertion_point(field_release:Traceability.IpfsTable.orgNo)
  
  return orgno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpfsTable::set_allocated_orgno(::std::string* orgno) {
  if (orgno != nullptr) {
    
  } else {
    
  }
  orgno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orgno);
  // @@protoc_insertion_point(field_set_allocated:Traceability.IpfsTable.orgNo)
}

// string productBatchNo = 4;
inline void IpfsTable::clear_productbatchno() {
  productbatchno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IpfsTable::productbatchno() const {
  // @@protoc_insertion_point(field_get:Traceability.IpfsTable.productBatchNo)
  return productbatchno_.GetNoArena();
}
inline void IpfsTable::set_productbatchno(const ::std::string& value) {
  
  productbatchno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.IpfsTable.productBatchNo)
}
#if LANG_CXX11
inline void IpfsTable::set_productbatchno(::std::string&& value) {
  
  productbatchno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.IpfsTable.productBatchNo)
}
#endif
inline void IpfsTable::set_productbatchno(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productbatchno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.IpfsTable.productBatchNo)
}
inline void IpfsTable::set_productbatchno(const char* value, size_t size) {
  
  productbatchno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.IpfsTable.productBatchNo)
}
inline ::std::string* IpfsTable::mutable_productbatchno() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.IpfsTable.productBatchNo)
  return productbatchno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpfsTable::release_productbatchno() {
  // @@protoc_insertion_point(field_release:Traceability.IpfsTable.productBatchNo)
  
  return productbatchno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpfsTable::set_allocated_productbatchno(::std::string* productbatchno) {
  if (productbatchno != nullptr) {
    
  } else {
    
  }
  productbatchno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productbatchno);
  // @@protoc_insertion_point(field_set_allocated:Traceability.IpfsTable.productBatchNo)
}

// string productCode = 5;
inline void IpfsTable::clear_productcode() {
  productcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IpfsTable::productcode() const {
  // @@protoc_insertion_point(field_get:Traceability.IpfsTable.productCode)
  return productcode_.GetNoArena();
}
inline void IpfsTable::set_productcode(const ::std::string& value) {
  
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.IpfsTable.productCode)
}
#if LANG_CXX11
inline void IpfsTable::set_productcode(::std::string&& value) {
  
  productcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.IpfsTable.productCode)
}
#endif
inline void IpfsTable::set_productcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.IpfsTable.productCode)
}
inline void IpfsTable::set_productcode(const char* value, size_t size) {
  
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.IpfsTable.productCode)
}
inline ::std::string* IpfsTable::mutable_productcode() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.IpfsTable.productCode)
  return productcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpfsTable::release_productcode() {
  // @@protoc_insertion_point(field_release:Traceability.IpfsTable.productCode)
  
  return productcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpfsTable::set_allocated_productcode(::std::string* productcode) {
  if (productcode != nullptr) {
    
  } else {
    
  }
  productcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productcode);
  // @@protoc_insertion_point(field_set_allocated:Traceability.IpfsTable.productCode)
}

// string submitTime = 6;
inline void IpfsTable::clear_submittime() {
  submittime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IpfsTable::submittime() const {
  // @@protoc_insertion_point(field_get:Traceability.IpfsTable.submitTime)
  return submittime_.GetNoArena();
}
inline void IpfsTable::set_submittime(const ::std::string& value) {
  
  submittime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.IpfsTable.submitTime)
}
#if LANG_CXX11
inline void IpfsTable::set_submittime(::std::string&& value) {
  
  submittime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.IpfsTable.submitTime)
}
#endif
inline void IpfsTable::set_submittime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  submittime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.IpfsTable.submitTime)
}
inline void IpfsTable::set_submittime(const char* value, size_t size) {
  
  submittime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.IpfsTable.submitTime)
}
inline ::std::string* IpfsTable::mutable_submittime() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.IpfsTable.submitTime)
  return submittime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpfsTable::release_submittime() {
  // @@protoc_insertion_point(field_release:Traceability.IpfsTable.submitTime)
  
  return submittime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpfsTable::set_allocated_submittime(::std::string* submittime) {
  if (submittime != nullptr) {
    
  } else {
    
  }
  submittime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), submittime);
  // @@protoc_insertion_point(field_set_allocated:Traceability.IpfsTable.submitTime)
}

// -------------------------------------------------------------------

// ProductTable

// string productkey = 1;
inline void ProductTable::clear_productkey() {
  productkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::productkey() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.productkey)
  return productkey_.GetNoArena();
}
inline void ProductTable::set_productkey(const ::std::string& value) {
  
  productkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.productkey)
}
#if LANG_CXX11
inline void ProductTable::set_productkey(::std::string&& value) {
  
  productkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.productkey)
}
#endif
inline void ProductTable::set_productkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.productkey)
}
inline void ProductTable::set_productkey(const char* value, size_t size) {
  
  productkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.productkey)
}
inline ::std::string* ProductTable::mutable_productkey() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.productkey)
  return productkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_productkey() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.productkey)
  
  return productkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_productkey(::std::string* productkey) {
  if (productkey != nullptr) {
    
  } else {
    
  }
  productkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productkey);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.productkey)
}

// string account = 2;
inline void ProductTable::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::account() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.account)
  return account_.GetNoArena();
}
inline void ProductTable::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.account)
}
#if LANG_CXX11
inline void ProductTable::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.account)
}
#endif
inline void ProductTable::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.account)
}
inline void ProductTable::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.account)
}
inline ::std::string* ProductTable::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_account() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_account(::std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.account)
}

// string address = 3;
inline void ProductTable::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::address() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.address)
  return address_.GetNoArena();
}
inline void ProductTable::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.address)
}
#if LANG_CXX11
inline void ProductTable::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.address)
}
#endif
inline void ProductTable::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.address)
}
inline void ProductTable::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.address)
}
inline ::std::string* ProductTable::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_address() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.address)
}

// string batchNo = 4;
inline void ProductTable::clear_batchno() {
  batchno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::batchno() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.batchNo)
  return batchno_.GetNoArena();
}
inline void ProductTable::set_batchno(const ::std::string& value) {
  
  batchno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.batchNo)
}
#if LANG_CXX11
inline void ProductTable::set_batchno(::std::string&& value) {
  
  batchno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.batchNo)
}
#endif
inline void ProductTable::set_batchno(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  batchno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.batchNo)
}
inline void ProductTable::set_batchno(const char* value, size_t size) {
  
  batchno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.batchNo)
}
inline ::std::string* ProductTable::mutable_batchno() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.batchNo)
  return batchno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_batchno() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.batchNo)
  
  return batchno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_batchno(::std::string* batchno) {
  if (batchno != nullptr) {
    
  } else {
    
  }
  batchno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), batchno);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.batchNo)
}

// string confirm = 5;
inline void ProductTable::clear_confirm() {
  confirm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::confirm() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.confirm)
  return confirm_.GetNoArena();
}
inline void ProductTable::set_confirm(const ::std::string& value) {
  
  confirm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.confirm)
}
#if LANG_CXX11
inline void ProductTable::set_confirm(::std::string&& value) {
  
  confirm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.confirm)
}
#endif
inline void ProductTable::set_confirm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  confirm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.confirm)
}
inline void ProductTable::set_confirm(const char* value, size_t size) {
  
  confirm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.confirm)
}
inline ::std::string* ProductTable::mutable_confirm() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.confirm)
  return confirm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_confirm() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.confirm)
  
  return confirm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_confirm(::std::string* confirm) {
  if (confirm != nullptr) {
    
  } else {
    
  }
  confirm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), confirm);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.confirm)
}

// string createTime = 6;
inline void ProductTable::clear_createtime() {
  createtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::createtime() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.createTime)
  return createtime_.GetNoArena();
}
inline void ProductTable::set_createtime(const ::std::string& value) {
  
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.createTime)
}
#if LANG_CXX11
inline void ProductTable::set_createtime(::std::string&& value) {
  
  createtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.createTime)
}
#endif
inline void ProductTable::set_createtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.createTime)
}
inline void ProductTable::set_createtime(const char* value, size_t size) {
  
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.createTime)
}
inline ::std::string* ProductTable::mutable_createtime() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.createTime)
  return createtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_createtime() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.createTime)
  
  return createtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_createtime(::std::string* createtime) {
  if (createtime != nullptr) {
    
  } else {
    
  }
  createtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createtime);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.createTime)
}

// string id = 7;
inline void ProductTable::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::id() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.id)
  return id_.GetNoArena();
}
inline void ProductTable::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.id)
}
#if LANG_CXX11
inline void ProductTable::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.id)
}
#endif
inline void ProductTable::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.id)
}
inline void ProductTable::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.id)
}
inline ::std::string* ProductTable::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_id() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.id)
}

// string key = 8;
inline void ProductTable::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::key() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.key)
  return key_.GetNoArena();
}
inline void ProductTable::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.key)
}
#if LANG_CXX11
inline void ProductTable::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.key)
}
#endif
inline void ProductTable::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.key)
}
inline void ProductTable::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.key)
}
inline ::std::string* ProductTable::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_key() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.key)
}

// string lat = 9;
inline void ProductTable::clear_lat() {
  lat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::lat() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.lat)
  return lat_.GetNoArena();
}
inline void ProductTable::set_lat(const ::std::string& value) {
  
  lat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.lat)
}
#if LANG_CXX11
inline void ProductTable::set_lat(::std::string&& value) {
  
  lat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.lat)
}
#endif
inline void ProductTable::set_lat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.lat)
}
inline void ProductTable::set_lat(const char* value, size_t size) {
  
  lat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.lat)
}
inline ::std::string* ProductTable::mutable_lat() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.lat)
  return lat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_lat() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.lat)
  
  return lat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_lat(::std::string* lat) {
  if (lat != nullptr) {
    
  } else {
    
  }
  lat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lat);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.lat)
}

// string lng = 10;
inline void ProductTable::clear_lng() {
  lng_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::lng() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.lng)
  return lng_.GetNoArena();
}
inline void ProductTable::set_lng(const ::std::string& value) {
  
  lng_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.lng)
}
#if LANG_CXX11
inline void ProductTable::set_lng(::std::string&& value) {
  
  lng_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.lng)
}
#endif
inline void ProductTable::set_lng(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lng_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.lng)
}
inline void ProductTable::set_lng(const char* value, size_t size) {
  
  lng_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.lng)
}
inline ::std::string* ProductTable::mutable_lng() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.lng)
  return lng_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_lng() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.lng)
  
  return lng_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_lng(::std::string* lng) {
  if (lng != nullptr) {
    
  } else {
    
  }
  lng_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lng);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.lng)
}

// string orgId = 11;
inline void ProductTable::clear_orgid() {
  orgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::orgid() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.orgId)
  return orgid_.GetNoArena();
}
inline void ProductTable::set_orgid(const ::std::string& value) {
  
  orgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.orgId)
}
#if LANG_CXX11
inline void ProductTable::set_orgid(::std::string&& value) {
  
  orgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.orgId)
}
#endif
inline void ProductTable::set_orgid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.orgId)
}
inline void ProductTable::set_orgid(const char* value, size_t size) {
  
  orgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.orgId)
}
inline ::std::string* ProductTable::mutable_orgid() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.orgId)
  return orgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_orgid() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.orgId)
  
  return orgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_orgid(::std::string* orgid) {
  if (orgid != nullptr) {
    
  } else {
    
  }
  orgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orgid);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.orgId)
}

// string picHash = 12;
inline void ProductTable::clear_pichash() {
  pichash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::pichash() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.picHash)
  return pichash_.GetNoArena();
}
inline void ProductTable::set_pichash(const ::std::string& value) {
  
  pichash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.picHash)
}
#if LANG_CXX11
inline void ProductTable::set_pichash(::std::string&& value) {
  
  pichash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.picHash)
}
#endif
inline void ProductTable::set_pichash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pichash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.picHash)
}
inline void ProductTable::set_pichash(const char* value, size_t size) {
  
  pichash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.picHash)
}
inline ::std::string* ProductTable::mutable_pichash() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.picHash)
  return pichash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_pichash() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.picHash)
  
  return pichash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_pichash(::std::string* pichash) {
  if (pichash != nullptr) {
    
  } else {
    
  }
  pichash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pichash);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.picHash)
}

// string picture = 13;
inline void ProductTable::clear_picture() {
  picture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::picture() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.picture)
  return picture_.GetNoArena();
}
inline void ProductTable::set_picture(const ::std::string& value) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.picture)
}
#if LANG_CXX11
inline void ProductTable::set_picture(::std::string&& value) {
  
  picture_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.picture)
}
#endif
inline void ProductTable::set_picture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.picture)
}
inline void ProductTable::set_picture(const char* value, size_t size) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.picture)
}
inline ::std::string* ProductTable::mutable_picture() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.picture)
  return picture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_picture() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.picture)
  
  return picture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_picture(::std::string* picture) {
  if (picture != nullptr) {
    
  } else {
    
  }
  picture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picture);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.picture)
}

// string roleId = 14;
inline void ProductTable::clear_roleid() {
  roleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::roleid() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.roleId)
  return roleid_.GetNoArena();
}
inline void ProductTable::set_roleid(const ::std::string& value) {
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.roleId)
}
#if LANG_CXX11
inline void ProductTable::set_roleid(::std::string&& value) {
  
  roleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.roleId)
}
#endif
inline void ProductTable::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.roleId)
}
inline void ProductTable::set_roleid(const char* value, size_t size) {
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.roleId)
}
inline ::std::string* ProductTable::mutable_roleid() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.roleId)
  return roleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_roleid() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.roleId)
  
  return roleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_roleid(::std::string* roleid) {
  if (roleid != nullptr) {
    
  } else {
    
  }
  roleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roleid);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.roleId)
}

// string roleName = 15;
inline void ProductTable::clear_rolename() {
  rolename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::rolename() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.roleName)
  return rolename_.GetNoArena();
}
inline void ProductTable::set_rolename(const ::std::string& value) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.roleName)
}
#if LANG_CXX11
inline void ProductTable::set_rolename(::std::string&& value) {
  
  rolename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.roleName)
}
#endif
inline void ProductTable::set_rolename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.roleName)
}
inline void ProductTable::set_rolename(const char* value, size_t size) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.roleName)
}
inline ::std::string* ProductTable::mutable_rolename() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.roleName)
  return rolename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_rolename() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.roleName)
  
  return rolename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_rolename(::std::string* rolename) {
  if (rolename != nullptr) {
    
  } else {
    
  }
  rolename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rolename);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.roleName)
}

// string status = 16;
inline void ProductTable::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::status() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.status)
  return status_.GetNoArena();
}
inline void ProductTable::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.status)
}
#if LANG_CXX11
inline void ProductTable::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.status)
}
#endif
inline void ProductTable::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.status)
}
inline void ProductTable::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.status)
}
inline ::std::string* ProductTable::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_status() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_status(::std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.status)
}

// string submitTime = 17;
inline void ProductTable::clear_submittime() {
  submittime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::submittime() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.submitTime)
  return submittime_.GetNoArena();
}
inline void ProductTable::set_submittime(const ::std::string& value) {
  
  submittime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.submitTime)
}
#if LANG_CXX11
inline void ProductTable::set_submittime(::std::string&& value) {
  
  submittime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.submitTime)
}
#endif
inline void ProductTable::set_submittime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  submittime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.submitTime)
}
inline void ProductTable::set_submittime(const char* value, size_t size) {
  
  submittime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.submitTime)
}
inline ::std::string* ProductTable::mutable_submittime() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.submitTime)
  return submittime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_submittime() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.submitTime)
  
  return submittime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_submittime(::std::string* submittime) {
  if (submittime != nullptr) {
    
  } else {
    
  }
  submittime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), submittime);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.submitTime)
}

// string transactionId = 18;
inline void ProductTable::clear_transactionid() {
  transactionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::transactionid() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.transactionId)
  return transactionid_.GetNoArena();
}
inline void ProductTable::set_transactionid(const ::std::string& value) {
  
  transactionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.transactionId)
}
#if LANG_CXX11
inline void ProductTable::set_transactionid(::std::string&& value) {
  
  transactionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.transactionId)
}
#endif
inline void ProductTable::set_transactionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transactionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.transactionId)
}
inline void ProductTable::set_transactionid(const char* value, size_t size) {
  
  transactionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.transactionId)
}
inline ::std::string* ProductTable::mutable_transactionid() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.transactionId)
  return transactionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_transactionid() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.transactionId)
  
  return transactionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_transactionid(::std::string* transactionid) {
  if (transactionid != nullptr) {
    
  } else {
    
  }
  transactionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transactionid);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.transactionId)
}

// string type = 19;
inline void ProductTable::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::type() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.type)
  return type_.GetNoArena();
}
inline void ProductTable::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.type)
}
#if LANG_CXX11
inline void ProductTable::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.type)
}
#endif
inline void ProductTable::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.type)
}
inline void ProductTable::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.type)
}
inline ::std::string* ProductTable::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_type() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_type(::std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.type)
}

// string updateTime = 20;
inline void ProductTable::clear_updatetime() {
  updatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::updatetime() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.updateTime)
  return updatetime_.GetNoArena();
}
inline void ProductTable::set_updatetime(const ::std::string& value) {
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.updateTime)
}
#if LANG_CXX11
inline void ProductTable::set_updatetime(::std::string&& value) {
  
  updatetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.updateTime)
}
#endif
inline void ProductTable::set_updatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.updateTime)
}
inline void ProductTable::set_updatetime(const char* value, size_t size) {
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.updateTime)
}
inline ::std::string* ProductTable::mutable_updatetime() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.updateTime)
  return updatetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_updatetime() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.updateTime)
  
  return updatetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_updatetime(::std::string* updatetime) {
  if (updatetime != nullptr) {
    
  } else {
    
  }
  updatetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updatetime);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.updateTime)
}

// string uploadTimes = 21;
inline void ProductTable::clear_uploadtimes() {
  uploadtimes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::uploadtimes() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.uploadTimes)
  return uploadtimes_.GetNoArena();
}
inline void ProductTable::set_uploadtimes(const ::std::string& value) {
  
  uploadtimes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.uploadTimes)
}
#if LANG_CXX11
inline void ProductTable::set_uploadtimes(::std::string&& value) {
  
  uploadtimes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.uploadTimes)
}
#endif
inline void ProductTable::set_uploadtimes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uploadtimes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.uploadTimes)
}
inline void ProductTable::set_uploadtimes(const char* value, size_t size) {
  
  uploadtimes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.uploadTimes)
}
inline ::std::string* ProductTable::mutable_uploadtimes() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.uploadTimes)
  return uploadtimes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_uploadtimes() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.uploadTimes)
  
  return uploadtimes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_uploadtimes(::std::string* uploadtimes) {
  if (uploadtimes != nullptr) {
    
  } else {
    
  }
  uploadtimes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uploadtimes);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.uploadTimes)
}

// string userId = 22;
inline void ProductTable::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::userid() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.userId)
  return userid_.GetNoArena();
}
inline void ProductTable::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.userId)
}
#if LANG_CXX11
inline void ProductTable::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.userId)
}
#endif
inline void ProductTable::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.userId)
}
inline void ProductTable::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.userId)
}
inline ::std::string* ProductTable::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_userid() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.userId)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_userid(::std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.userId)
}

// string userName = 23;
inline void ProductTable::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::username() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.userName)
  return username_.GetNoArena();
}
inline void ProductTable::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.userName)
}
#if LANG_CXX11
inline void ProductTable::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.userName)
}
#endif
inline void ProductTable::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.userName)
}
inline void ProductTable::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.userName)
}
inline ::std::string* ProductTable::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_username() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.userName)
}

// string userUUID = 24;
inline void ProductTable::clear_useruuid() {
  useruuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::useruuid() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.userUUID)
  return useruuid_.GetNoArena();
}
inline void ProductTable::set_useruuid(const ::std::string& value) {
  
  useruuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.userUUID)
}
#if LANG_CXX11
inline void ProductTable::set_useruuid(::std::string&& value) {
  
  useruuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.userUUID)
}
#endif
inline void ProductTable::set_useruuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  useruuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.userUUID)
}
inline void ProductTable::set_useruuid(const char* value, size_t size) {
  
  useruuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.userUUID)
}
inline ::std::string* ProductTable::mutable_useruuid() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.userUUID)
  return useruuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_useruuid() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.userUUID)
  
  return useruuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_useruuid(::std::string* useruuid) {
  if (useruuid != nullptr) {
    
  } else {
    
  }
  useruuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), useruuid);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.userUUID)
}

// string work = 25;
inline void ProductTable::clear_work() {
  work_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductTable::work() const {
  // @@protoc_insertion_point(field_get:Traceability.ProductTable.work)
  return work_.GetNoArena();
}
inline void ProductTable::set_work(const ::std::string& value) {
  
  work_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Traceability.ProductTable.work)
}
#if LANG_CXX11
inline void ProductTable::set_work(::std::string&& value) {
  
  work_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Traceability.ProductTable.work)
}
#endif
inline void ProductTable::set_work(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  work_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Traceability.ProductTable.work)
}
inline void ProductTable::set_work(const char* value, size_t size) {
  
  work_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Traceability.ProductTable.work)
}
inline ::std::string* ProductTable::mutable_work() {
  
  // @@protoc_insertion_point(field_mutable:Traceability.ProductTable.work)
  return work_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductTable::release_work() {
  // @@protoc_insertion_point(field_release:Traceability.ProductTable.work)
  
  return work_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductTable::set_allocated_work(::std::string* work) {
  if (work != nullptr) {
    
  } else {
    
  }
  work_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), work);
  // @@protoc_insertion_point(field_set_allocated:Traceability.ProductTable.work)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Traceability

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_Traceability_2eproto
